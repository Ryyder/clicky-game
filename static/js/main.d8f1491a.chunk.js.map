{"version":3,"sources":["../clicky-game/src/components/FriendCard/index.js","../clicky-game/src/components/Wrapper/index.js","../clicky-game/src/components/Title/index.js","../clicky-game/src/components/Navbar/index.js","../clicky-game/src/App.js","../clicky-game/src/index.js"],"names":["FriendCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","src","image","alt","name","Wrapper","children","Title","Nav","href","title","status","score","topScore","App","state","friends","highScore","currentScore","clicked","handleShuffle","console","log","copy","Object","toConsumableArray","_this","sort","Math","random","setState","renderCards","map","friend","components_FriendCard","key","handleIncrement","handleReset","scoreNow","indexOf","concat","components_Wrapper","Navbar","this","components_Title","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"0uEAgBeA,SAbI,SAAAC,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OACEC,UAAU,qBACVC,MAAOL,EAAMM,GACbC,QAAS,kBAAMP,EAAMQ,YAAYR,EAAMM,MAEvCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,MAAOC,IAAKX,EAAMY,iBCHzBC,MAJf,SAAiBb,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMc,WCE1BC,MAJf,SAAef,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMc,WCqBvBE,SArBH,SAAAhB,GACV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,KAAGc,KAAK,KAAKjB,EAAMkB,QAErBjB,EAAAC,EAAAC,cAAA,UACGH,EAAMmB,QAETlB,EAAAC,EAAAC,cAAA,4BACkBH,EAAMoB,OAExBnB,EAAAC,EAAAC,cAAA,wBACcH,EAAMqB,qBC2FbC,6MAlGbC,MAAQ,CACNC,UACAC,UAAW,EACXC,aAAc,EACdP,OAAQ,GACRQ,QAAS,MAIXC,cAAgB,WACdC,QAAQC,IAAI,mBAEZ,IAAIC,EAAIC,OAAAC,EAAA,EAAAD,CAAOE,EAAKX,MAAMC,SAE1BO,EAAKI,KAAK,kBAAMC,KAAKC,SAAW,KAEhCH,EAAKI,SAAS,CAAEd,QAASO,OAI3BQ,YAAc,WAEZ,OAAOL,EAAKX,MAAMC,QAAQgB,IAAI,SAAAC,GAAM,OAClCxC,EAAAC,EAAAC,cAACuC,EAAD,CACEpC,GAAImC,EAAOnC,GACXqC,IAAKF,EAAOnC,GACZI,MAAO+B,EAAO/B,MACdkC,gBAAiBV,EAAKU,gBACtBpC,YAAa0B,EAAK1B,YAClBqC,YAAaX,EAAKW,mBAMxBD,gBAAkB,WAEhB,IAAME,EAAWZ,EAAKX,MAAMG,aAAe,EAE3CQ,EAAKI,SAAS,CACZZ,aAAcoB,EACd3B,OAAQ,KAGN2B,GAAYZ,EAAKX,MAAME,UACzBS,EAAKI,SAAS,CAAEb,UAAWqB,IACL,KAAbA,GACTZ,EAAKI,SAAS,CAAEnB,OAAQ,oCAO5BX,YAAc,SAAAF,IAE4B,IAApC4B,EAAKX,MAAMI,QAAQoB,QAAQzC,IAE7B4B,EAAKU,kBAELV,EAAKI,SAAS,CAAEX,QAASO,EAAKX,MAAMI,QAAQqB,OAAO1C,KACnD4B,EAAKN,iBAILM,EAAKW,iBAMTA,YAAc,WACZX,EAAKI,SAAS,CACZZ,aAAc,EACdD,UAAWS,EAAKX,MAAME,UACtBN,OAAQ,YACRQ,QAAS,KAEXO,EAAKN,yFAKL,OACE3B,EAAAC,EAAAC,cAAC8C,EAAD,KACEhD,EAAAC,EAAAC,cAAC+C,EAAD,CACEhC,MAAM,oBACNE,MAAO+B,KAAK5B,MAAMG,aAClBL,SAAU8B,KAAK5B,MAAME,UACrBN,OAAQgC,KAAK5B,MAAMJ,SAErBlB,EAAAC,EAAAC,cAACiD,EAAD,kJACCD,KAAKZ,sBA9FIc,mBCHlBC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.d8f1491a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst FriendCard = props => (\n  <div\n    className=\"card img-container\"\n    value={props.id}\n    onClick={() => props.handleClick(props.id)}\n  >\n    <div className=\"img-container\">\n      <img src={props.image} alt={props.name} />\n    </div>\n  </div>\n);\n\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Nav = props => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <ul className=\"navbar-nav mr-auto\">\n        <li className=\"nav-item active\">\n          <a href=\"/\">{props.title}</a>\n        </li>\n        <li>\n          {props.status}\n        </li>\n        <li>\n          Current Score: {props.score}\n        </li>\n        <li>\n          Top Score: {props.topScore}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Nav from \"./components/Navbar\";\nimport friends from \"./friends.json\";\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array, highscore, currentscore, status, and clicked array\n  state = {\n    friends,\n    highScore: 0,\n    currentScore: 0,\n    status: \"\",\n    clicked: []\n  };\n\n  //our shuffle method...\n  handleShuffle = () => {\n    console.log(\"Shuffling cards\");\n    //use spread operator to no mutate original state data\n    let copy = [...this.state.friends]\n    //apply our shuffe to the copied object\n    copy.sort(() => Math.random() - 0.5);\n    //setState to the copy object\n    this.setState({ friends: copy });\n  }\n\n  //method to handle rendering our cards\n  renderCards = () => {\n    //map over the friends object and put this data in our friendcar\n    return this.state.friends.map(friend => (\n      <FriendCard\n        id={friend.id}\n        key={friend.id}\n        image={friend.image}\n        handleIncrement={this.handleIncrement}\n        handleClick={this.handleClick}\n        handleReset={this.handleReset}\n      />\n    ))\n  }\n\n  //handleIncrememnt method handles\n  handleIncrement = () => {\n    //save the value of the incremented score in scoreNow\n    const scoreNow = this.state.currentScore + 1;\n    //set the state of the currentScore to scoreNow\n    this.setState({\n      currentScore: scoreNow,\n      status: \"\"\n    });\n    //if scoreNow is >= highScore, then set the high score to the scoreNow value\n    if (scoreNow >= this.state.highScore) {\n      this.setState({ highScore: scoreNow });\n    } else if (scoreNow === 12) {\n      this.setState({ status: \"All 12 matched!!! You Win!!!\" });\n    }\n  };\n\n  //onclick, this should take in the id of the card.\n  //if the id's are not equal, then call our increment method\n  //else the game restarts\n  handleClick = id => {\n    //check if our clicked array contains any of the id's have not been clicked...so if not in our clicked array\n    if (this.state.clicked.indexOf(id) === -1) {\n      //increment our score\n      this.handleIncrement();\n      //add the id to the clicked array in our state object\n      this.setState({ clicked: this.state.clicked.concat(id) });\n      this.handleShuffle();\n    }\n    //if same id clicked twice, we reset the game board\n    else {\n      this.handleReset();\n    }\n  };\n\n  //need reset method....\n  //reinitialize the game setstate{}......\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      highScore: this.state.highScore,\n      status: \"New Game!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  //our render. inside our wrapper, call our nav component, title component, and rendercard method\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title=\"Naruto Click Game\"\n          score={this.state.currentScore}\n          topScore={this.state.highScore}\n          status={this.state.status}\n        />\n        <Title>Click on a Character! If you don't click on any duplicates twice in a row, your score goes up 1 point. Try to see how high you can score.</Title>\n        {this.renderCards()}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}